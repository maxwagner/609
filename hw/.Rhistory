mm1 <- function (){
t.end   <- 1440 # duration of sim
t.clock <- 0    # sim time
Ta <- 10        # interarrival period
Ts <- 7         # service period
t1 <- 0         # time for next arrival
t2 <- t.end     # time for next departure
tn <- t.clock   # tmp var for last event time
tb <- 0         # tmp var for last busy-time start
n <- 0          # number in system
s <- 0          # cumulative number-time product
b <- 0          # total busy time
c <- 0          # total completions
# run while clock hasn't reached completion
while (t.clock < t.end) {
if (t1 < t2) { # arriving
t.clock <- t1
s <- s + n * (t.clock - tn)
n <- n + 1
tn <- t.clock
t1 <- t.clock + rexp(1, 1/Ta)
if(n == 1) {
tb <- t.clock
t2 <- t.clock + rexp(1, 1/Ts)
}
} else { # leaving
t.clock <- t2
s <- s + n * (t.clock - tn)
n <- n - 1
tn <- t.clock
c <- c + 1
if (n > 0) {
t2 <- t.clock + rexp(1, 1/Ts)
} else {
t2 <- t.end
b <- b + t.clock - tb
}
}
}
return(c(b,c))
}
x<- replicate(200,mm1())
paste('System Utilization Rate:', mean(x[1,]/1440))
paste('Expect system time:' , mean(x[1,]/ mean(x[2,] )) , ' minutes')
1440/60
mm1 <- function (){
dura   <- 1220 # duration of sim
start <- 0 # start time
inter <- 10 # interarrival time
serv <- 7 # service time
next.a <- 0 # next arrival
next.d <- dura # next departure
temp1 <- start # temps
temp2 <- 0         # tmp var for last busy-time start
n <- 0          # number in system
s <- 0          # cumulative number-time product
b <- 0          # total busy time
c <- 0          # total completions
# run while clock hasn't reached completion
while (start < dura) {
if (next.a < next.d) { # arriving
start <- next.a
s <- s + n * (start - temp1)
n <- n + 1
temp1 <- start
next.a <- start + rexp(1, 1/inter)
if(n == 1) {
temp2 <- start
next.d <- start + rexp(1, 1/serv)
}
} else { # leaving
start <- next.d
s <- s + n * (start - temp1)
n <- n - 1
temp1 <- start
c <- c + 1
if (n > 0) {
next.d <- start + rexp(1, 1/serv)
} else {
next.d <- dura
b <- b + start - temp2
}
}
}
return(c(b,c))
}
queue <- replicate(200,mm1())
paste('Utilization Rate:', mean(queue[1,] / 1220))
paste('System Time:' , mean(queue[1,]/ mean(queue[2,] )), 'minutes')
filename <- 'E:/Games/paintball2/jump/scores.txt'
zz <- scan(filename, what = 'raw', sep = '\n')
zz2 <- c()
i <- 1
for(x in zz) {
if(grepl('^\\d', x)) {
zz2[i] <- x
i <- i + 1
}
}
write.table(zz2, 'cleaned.txt', row.names = FALSE, col.names = FALSE, quote = FALSE)
zz <- read.table('cleaned.txt', header = FALSE)
zz <- zz[1:2]
points <- c(15:1)
zz$points <- points[zz$V1]
zzcount <- aggregate(zz$points, by = list(zz$V2), FUN = length)
zz <- aggregate(zz$points, by = list(zz$V2), FUN = sum)
zz <- merge(x = zz, y = zzcount, by = "Group.1")
colnames(zz) = c('name','points','maps')
zz$avg.finish <- 16 - round(zz$points / zz$maps, 1)
zz$points.est <- round((zz$points / zz$maps) * 15,1)
zz <- zz[order(zz$points, decreasing = TRUE),]
rownames(zz) <- NULL
zz
filename <- 'E:/Games/paintball2/jump/scores.txt'
zz <- scan(filename, what = 'raw', sep = '\n')
zz2 <- c()
i <- 1
for(x in zz) {
if(grepl('^\\d', x)) {
zz2[i] <- x
i <- i + 1
}
}
write.table(zz2, 'cleaned.txt', row.names = FALSE, col.names = FALSE, quote = FALSE)
zz <- read.table('cleaned.txt', header = FALSE)
zz <- zz[1:2]
points <- c(15:1)
zz$points <- points[zz$V1]
zzcount <- aggregate(zz$points, by = list(zz$V2), FUN = length)
zz <- aggregate(zz$points, by = list(zz$V2), FUN = sum)
zz <- merge(x = zz, y = zzcount, by = "Group.1")
colnames(zz) = c('name','points','maps')
zz$avg.finish <- 16 - round(zz$points / zz$maps, 1)
zz$points.est <- round((zz$points / zz$maps) * 15,1)
zz <- zz[order(zz$points, decreasing = TRUE),]
rownames(zz) <- NULL
zz
filename <- 'E:/Games/paintball2/jump/scores.txt'
zz <- scan(filename, what = 'raw', sep = '\n')
zz2 <- c()
i <- 1
for(x in zz) {
if(grepl('^\\d', x)) {
zz2[i] <- x
i <- i + 1
}
}
write.table(zz2, 'cleaned.txt', row.names = FALSE, col.names = FALSE, quote = FALSE)
zz <- read.table('cleaned.txt', header = FALSE)
zz <- zz[1:2]
points <- c(15:1)
zz$points <- points[zz$V1]
zzcount <- aggregate(zz$points, by = list(zz$V2), FUN = length)
zz <- aggregate(zz$points, by = list(zz$V2), FUN = sum)
zz <- merge(x = zz, y = zzcount, by = "Group.1")
colnames(zz) = c('name','points','maps')
zz$avg.finish <- 16 - round(zz$points / zz$maps, 1)
zz$points.est <- round((zz$points / zz$maps) * 15,1)
zz <- zz[order(zz$points.est, decreasing = TRUE),]
rownames(zz) <- NULL
zz
derivi <- function(x) {
xp <- x
d <- (xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2))
return (d / .00005)
}
derivi(3)
derivi <- function(x) {
xp <- x + .00005
d <- (xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2))
return (d / .00005)
}
derivi(3)
derivi <- function(x, lim) {
xp <- x + lim
return <- ((xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2))) / lim
}
derivi(3)
```{r}
derivi <- function(x, lim) {
xp <- x + lim
return <- ((xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2))) / lim
}
derivi(3, .00005)
derivi <- function(x, lim) {
xp <- x + lim
return <- ((xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2))) / lim
}
derivi(3, .00005)
derivi <- function(x, lim) {
xp <- x + lim
return <- ((xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2))) / lim
}
derivi(3, .00005)
derivi <- function(x, lim) {
xp <- x + lim
return ((xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2))) / lim
}
derivi(3, .00005)
derivi <- function(x, lim) {
xp <- x + lim
return ((xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2)))
}
derivi(3, .00005)
derivi <- function(x, lim) {
xp <- x + lim
return ((xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2)))
}
derivi(3, .00005)
derivi <- function(x, lim) {
xp <- x + lim
return ((xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2)) / lim)
}
derivi(3, .00005)
derivi <- function(x, lim) {
xp <- x + lim
return (((xp**3 + 2*(xp**2)) - (x**3 + 2*(x**2))) / lim)
}
derivi(3, .00005)
x <- seq(1,3,by = .00001)
y <- 3*(x**2) + 4*x
sum(y*.00001)
(3**3 + 2*(3**2)) - (1**3 + 2*(1**2))
setwd("~/GitHub/609/hw")
data <- data.frame(x = x0, y = y0, n = 0)
x0 <- 100
xs <- 1/3
y0 <- 200
ys <- 1/2
lim <- 25
data <- data.frame(x = x0, y = y0, n = 0)
data
graphit <- function(x0,y0,xs,ys,limit) {
data <- data.frame(x = x0, y = y0, n = 0)
for (x in x:limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n) + 1
data <- rbind(data, c(x, y, n))
}
}
x0 <- 100
xs <- 1/3
y0 <- 200
ys <- 1/2
graphit(x0,y0,xs,yx,25)
graphit(x0,y0,xs,ys,25)
x0 <- 100
xs <- 1/3
y0 <- 200
ys <- 1/2
graphit <- function(x0,y0,xs,ys,limit) {
data <- data.frame(x = x0, y = y0, n = 0)
for (x in x:limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n) + 1
data <- rbind(data, c(x, y, n))
}
}
graphit(x0,y0,xs,ys,25)
graphit <- function(x0,y0,xs,ys,limit) {
data <- data.frame(x = x0, y = y0, n = 0)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n) + 1
data <- rbind(data, c(x, y, n))
}
}
graphit(x0,y0,xs,ys,25)
graphit <- function(x0,y0,xs,ys,limit) {
data <- data.frame(x = x0, y = y0, n = 0)
n <- 0
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n) + 1
data <- rbind(data, c(x, y, n))
}
}
graphit <- function(x0,y0,xs,ys,limit) {
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n) + 1
data <- rbind(data, c(x, y, n))
}
}
graphit(x0,y0,xs,ys,25)
warnings()
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n) + 1
data <- rbind(data, c(x, y, n))
data
n
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n) + 1
data <- rbind(data, c(x, y, n))
data
n <- tail(data$n) + 1
n
graphit <- function(x0,y0,xs,ys,limit) {
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
}
graphit(x0,y0,xs,ys,25)
ddata
data
graphit <- function(x0,y0,xs,ys,limit) {
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
print (data)
}
graphit(x0,y0,xs,ys,25)
graphit <- function(x0,y0,xs,ys,limit) {
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit -1) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
print (data)
}
graphit(x0,y0,xs,ys,25)
xequil <- signif(tail(data$x,1))
yequil <- signif(tail(data$y,1))
graphit <- function(x0,y0,xs,ys,limit) {
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
}
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
limit = 25
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
data
xequil <- signif(tail(data$x,1))
yequil <- signif(tail(data$y,1))
xequil
data <- melt(data,id.vars="n",variable.name="country",value.name="arms")
library(reshape2)
data <- melt(data,id.vars="n",variable.name="country",value.name="arms")
data
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
daa
data
data <- melt(data,id.vars="n",variable.name="country",value.name="arms")
data
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
data
graphit(100,200,1/3,1/2,25)
library(reshape2)
x0 <- 100
xs <- 1/3
y0 <- 200
ys <- 1/2
graphit <- function(x0,y0,xs,ys,limit) {
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
xequil <- signif(tail(data$x,1))
yequil <- signif(tail(data$y,1))
data <- melt(data,id.vars="n",variable.name="country",value.name="arms")
print (data)
}
graphit(100,200,1/3,1/2,25)
library(reshape2)
x0 <- 100
xs <- 1/3
y0 <- 200
ys <- 1/2
graphit <- function(x0,y0,xs,ys,limit) {
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
xequil <- signif(tail(data$x,1))
yequil <- signif(tail(data$y,1))
print (data)
}
graphit(100,200,1/3,1/2,25)
library(ggplot2)
g1 <- ggplot(data, aes(x=n,y=x)) + geom_line()
g1
g1 <- ggplot(data, aes(x=n,y=y)) + geom_line()
g1 <- ggplot(data, aes(x=n,y=x)) + geom_line()
g2 <- ggplot(data, aes(x=n,y=y)) + geom_line()
multiplot(g1, g2)
multiplot(g1, g2)
g2 <- ggplot(data, aes(x=n,y=y)) + geom_line()
g2
g1 <- plot(data, aes(x=n,y=x)) + geom_line()
g1 <- plot(data$n, data$x)
g1
data$n
data$x
g1 <- plot(x=data$n, y=data$x)
g1
plot(x=data$n, y=data$x, type = "l")
lines(x=data$n, y=data$y, type = "l")
plot(x=data$n, y=data$x, type = "l")
lines(x=data$n, y=data$y, type = "l")
lines(x=data$n, y=data$y)
lines(x=data$n, y=data$y)
plot(x=data$n, y=data$x, type = "l", col = "red")
lines(x=data$n, y=data$y, col="green")
plot(x=data$n, y=data$x, type = "l", col = "red")
par(new=TRUE)
plot(x=data$n, y=data$y, col="green")
plot(x=data$n, y=data$x, type = "l", col = "red")
par(new=TRUE)
plot(x=data$n, y=data$y, type = "l", col="green")
graphit(1000,1000,1/3,1/2,25)
graphit <- function(x0,y0,xs,ys,limit) {
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
plot(x=data$n, y=data$x, type = "l", col = "red")
par(new=TRUE)
plot(x=data$n, y=data$y, type = "l", col="green")
}
graphit(100,200,1/3,1/2,25)
graphit(1000,1000,1/3,1/2,25)
graphit <- function(x0,y0,xs,ys,limit) {
n <- 0
data <- data.frame(x = x0, y = y0, n = n)
while (n < limit) {
y <- 120 + ys * tail(data$x, 1)
x <- 60 + xs * tail(data$y, 1)
n <- tail(data$n,1) + 1
data <- rbind(data, c(x, y, n))
}
plot(x=data$n, y=data$x, type = "l", col = "red")
par(new=TRUE)
plot(x=data$n, y=data$y, type = "l", col="green")
print (data)
}
graphit(1000,1000,1/3,1/2,25)
graphit(100,200,1/3,1/2,25)
graphit(1000,1000,1/8,1/12,25)
graphit(1000,1000,1/1.1,-1/2,25)
graphit(1000,1000,-1/2,-1/2,25)
